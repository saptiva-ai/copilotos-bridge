#!/usr/bin/env python3
"""
Test script para verificar la integraci√≥n con SAPTIVA API.
"""

import asyncio
import os
import sys
import time
from pathlib import Path

# Configurar variables de entorno antes de importar
os.environ.setdefault("SAPTIVA_BASE_URL", "https://api.saptiva.ai")
# Check for API key instead of setting a default
if not os.getenv("SAPTIVA_API_KEY"):
    print("‚ùå SAPTIVA_API_KEY environment variable not set")
    print("   This test requires a real API key to run")
    print("   Set it with: export SAPTIVA_API_KEY=your_api_key")
    exit(1)
os.environ.setdefault("SAPTIVA_TIMEOUT", "30")
os.environ.setdefault("SAPTIVA_MAX_RETRIES", "3")

# A√±adir src al path
src_path = Path(__file__).parent / "src"
sys.path.insert(0, str(src_path))


async def test_saptiva_client():
    """Test b√°sico del cliente SAPTIVA"""

    try:
        from services.saptiva_client import SaptivaClient

        print("üß™ Iniciando test de integraci√≥n SAPTIVA...")

        # Crear cliente
        client = SaptivaClient()

        # Test 1: Health check
        print("\n1Ô∏è‚É£ Testing health check...")
        is_healthy = await client.health_check()
        print(f"   Health check: {'‚úÖ PASSED' if is_healthy else '‚ùå FAILED'}")

        # Test 2: Obtener modelos disponibles
        print("\n2Ô∏è‚É£ Testing available models...")
        models = await client.get_available_models()
        print(f"   Available models: {models}")

        # Test 3: Chat completion simple
        print("\n3Ô∏è‚É£ Testing simple chat completion...")
        messages = [
            {"role": "user", "content": "Hola, ¬øpuedes decirme brevemente qu√© eres?"}
        ]

        start_time = time.time()
        response = await client.chat_completion(
            messages=messages,
            model="SAPTIVA_CORTEX",
            temperature=0.7,
            max_tokens=100
        )
        duration = time.time() - start_time

        print(f"   Response time: {duration:.2f}s")
        print(f"   Response ID: {response.id}")
        print(f"   Model: {response.model}")
        print(f"   Content: {response.choices[0]['message']['content'][:100]}...")

        if response.usage:
            print(f"   Tokens used: {response.usage}")

        # Test 4: Chat con contexto
        print("\n4Ô∏è‚É£ Testing chat with context...")
        conversation = [
            {"role": "user", "content": "Mi nombre es Carlos"},
            {"role": "assistant", "content": "Hola Carlos, encantado de conocerte."},
            {"role": "user", "content": "¬øCu√°l es mi nombre?"}
        ]

        context_response = await client.chat_completion(
            messages=conversation,
            model="SAPTIVA_CORTEX",
            temperature=0.3,
            max_tokens=50
        )

        print(f"   Context response: {context_response.choices[0]['message']['content']}")

        # Test 5: Diferentes modelos
        print("\n5Ô∏è‚É£ Testing different models...")
        for model in ["SAPTIVA_CORTEX", "SAPTIVA_OPS"]:
            try:
                model_response = await client.chat_completion(
                    messages=[{"role": "user", "content": "Responde en m√°ximo 10 palabras: ¬øQu√© modelo eres?"}],
                    model=model,
                    max_tokens=30
                )
                print(f"   {model}: {model_response.choices[0]['message']['content']}")
            except Exception as e:
                print(f"   {model}: ‚ùå Error - {e}")

        # Test 6: Streaming (b√°sico)
        print("\n6Ô∏è‚É£ Testing streaming...")
        try:
            print("   Streaming response: ", end="", flush=True)
            async for chunk in client.chat_completion_stream(
                messages=[{"role": "user", "content": "Cuenta del 1 al 5 separado por comas"}],
                model="SAPTIVA_CORTEX",
                max_tokens=50
            ):
                if chunk.choices and chunk.choices[0].get("delta", {}).get("content"):
                    content = chunk.choices[0]["delta"]["content"]
                    print(content, end="", flush=True)
            print("\n   ‚úÖ Streaming completed")
        except Exception as e:
            print(f"\n   ‚ùå Streaming failed: {e}")

        await client.client.aclose()

        print("\nüéâ Tests completados exitosamente!")
        return True

    except Exception as e:
        print(f"\n‚ùå Error durante los tests: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_integration_endpoint():
    """Test del endpoint completo simulando request HTTP"""

    print("\n" + "="*50)
    print("üåê Testing integrated chat endpoint")
    print("="*50)

    try:
        # Simular el flujo del endpoint de chat
        from services.saptiva_client import get_saptiva_client

        # Test mensaje simple
        client = await get_saptiva_client()

        # Simular hist√≥rico de conversaci√≥n
        message_history = [
            {"role": "user", "content": "Hola, soy un desarrollador trabajando en un proyecto de IA"}
        ]

        # Llamar al cliente como lo har√≠a el endpoint
        saptiva_response = await client.chat_completion(
            messages=message_history,
            model="SAPTIVA_CORTEX",
            temperature=0.7,
            max_tokens=150
        )

        # Extraer informaci√≥n como en el endpoint
        ai_response_content = saptiva_response.choices[0]["message"]["content"]
        usage_info = saptiva_response.usage or {}
        tokens_used = usage_info.get("total_tokens", 0)
        finish_reason = saptiva_response.choices[0].get("finish_reason", "stop")

        print(f"‚úÖ Endpoint simulation successful!")
        print(f"üìÑ Response: {ai_response_content[:200]}...")
        print(f"üéØ Tokens used: {tokens_used}")
        print(f"üèÅ Finish reason: {finish_reason}")
        print(f"üÜî Response ID: {saptiva_response.id}")

        await client.client.aclose()
        return True

    except Exception as e:
        print(f"‚ùå Endpoint simulation failed: {e}")
        import traceback
        traceback.print_exc()
        return False


async def main():
    """Funci√≥n principal"""
    print("üöÄ SAPTIVA Integration Test Suite")
    print("=" * 50)

    # Test cliente b√°sico
    client_success = await test_saptiva_client()

    # Test integraci√≥n endpoint
    endpoint_success = await test_integration_endpoint()

    print("\n" + "="*50)
    print("üìä RESUMEN DE TESTS")
    print("="*50)
    print(f"Cliente SAPTIVA: {'‚úÖ PASSED' if client_success else '‚ùå FAILED'}")
    print(f"Integraci√≥n Endpoint: {'‚úÖ PASSED' if endpoint_success else '‚ùå FAILED'}")

    if client_success and endpoint_success:
        print("\nüéâ ¬°Todos los tests pasaron! La integraci√≥n SAPTIVA est√° funcionando correctamente.")
        print("üöÄ El chat ahora usa modelos reales de SAPTIVA en lugar de mocks.")
    else:
        print("\n‚ö†Ô∏è Algunos tests fallaron. Revisar configuraci√≥n y conectividad.")

    return client_success and endpoint_success


if __name__ == "__main__":
    result = asyncio.run(main())
    sys.exit(0 if result else 1)