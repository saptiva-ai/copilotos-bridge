"""Utility helpers for symmetric encryption of sensitive configuration values."""

from __future__ import annotations

import base64
import hashlib
from typing import Optional

from cryptography.fernet import Fernet, InvalidToken


def _derive_key(secret: str) -> bytes:
    """Derive a stable Fernet key from an arbitrary secret string."""
    digest = hashlib.sha256(secret.encode("utf-8")).digest()
    return base64.urlsafe_b64encode(digest)


def _get_cipher(secret: str) -> Fernet:
    return Fernet(_derive_key(secret))


def encrypt_secret(secret: str, value: str) -> str:
    """Encrypt a value using the provided secret.

    Args:
        secret: Base secret used to derive the encryption key.
        value: Plain text value to encrypt.

    Returns:
        Encrypted string in URL-safe base64 format.
    """
    cipher = _get_cipher(secret)
    token = cipher.encrypt(value.encode("utf-8"))
    return token.decode("utf-8")


def decrypt_secret(secret: str, token: str) -> Optional[str]:
    """Decrypt a previously encrypted value.

    Args:
        secret: Base secret used to derive the encryption key.
        token: Encrypted token generated by :func:`encrypt_secret`.

    Returns:
        Decrypted plain text or ``None`` when decryption fails.
    """
    cipher = _get_cipher(secret)
    try:
        value = cipher.decrypt(token.encode("utf-8"))
        return value.decode("utf-8")
    except (InvalidToken, ValueError):
        return None
