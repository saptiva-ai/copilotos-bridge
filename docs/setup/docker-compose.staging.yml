version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: copilotos-mongodb-staging
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER:-copilotos_staging}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD:-staging_secure_password}
      MONGO_INITDB_DATABASE: copilotos_staging
    volumes:
      - mongodb_staging_data:/data/db
      - mongodb_staging_config:/data/configdb
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - copilotos-staging-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: copilotos-redis-staging
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-staging_redis_password}
    volumes:
      - redis_staging_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - copilotos-staging-network

  # FastAPI Backend
  api:
    image: ${API_IMAGE:-ghcr.io/jazielflo/copilotos-bridge/api:develop}
    container_name: copilotos-api-staging
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      - MONGODB_URL=mongodb://${MONGODB_USER:-copilotos_staging}:${MONGODB_PASSWORD:-staging_secure_password}@mongodb:27017/copilotos_staging?authSource=admin
      - REDIS_URL=redis://:${REDIS_PASSWORD:-staging_redis_password}@redis:6379/0
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-staging-jwt-secret-key-change-me}
      - SECRET_KEY=${SECRET_KEY:-staging-session-secret-change-me}
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${JWT_EXPIRE_MINUTES:-60}
      - JWT_REFRESH_TOKEN_EXPIRE_DAYS=${JWT_REFRESH_DAYS:-7}
      - CORS_ORIGINS=["${FRONTEND_URL:-http://localhost:3000}","http://web:3000"]
      - ALLOWED_HOSTS=["${API_HOST:-localhost}","127.0.0.1","web","api"]
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - DEBUG=${DEBUG:-false}
      - ALETHEIA_BASE_URL=${ALETHEIA_URL:-http://aletheia:8000}
      - ALETHEIA_API_KEY=${ALETHEIA_API_KEY:-}
      - RATE_LIMIT_REQUESTS_PER_MINUTE=${RATE_LIMIT:-100}
      - MAX_PROMPT_LENGTH=${MAX_PROMPT_LENGTH:-10000}
      - OTEL_SERVICE_NAME=copilotos-bridge-staging
      - JAEGER_ENDPOINT=${JAEGER_ENDPOINT:-http://jaeger:14268/api/traces}
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - copilotos-staging-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-staging.rule=Host(`api-staging.${DOMAIN:-localhost}`)"
      - "traefik.http.services.api-staging.loadbalancer.server.port=8001"

  # Next.js Frontend
  web:
    image: ${WEB_IMAGE:-ghcr.io/jazielflo/copilotos-bridge/web:develop}
    container_name: copilotos-web-staging
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - API_BASE_URL=http://api:8001
      - NEXT_PUBLIC_API_URL=${PUBLIC_API_URL:-http://localhost:8001}
      - NEXT_PUBLIC_APP_NAME=SAPTIVA CopilotOS (Staging)
      - NEXT_PUBLIC_APP_DESCRIPTION=Chat UI + Aletheia Deep Research (Staging Environment)
      - NEXT_PUBLIC_FEATURE_REPORT_DOWNLOAD=true
      - NEXT_PUBLIC_ENVIRONMENT=staging
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - copilotos-staging-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web-staging.rule=Host(`staging.${DOMAIN:-localhost}`)"
      - "traefik.http.services.web-staging.loadbalancer.server.port=3000"

volumes:
  mongodb_staging_data:
    driver: local
  mongodb_staging_config:
    driver: local
  redis_staging_data:
    driver: local

networks:
  copilotos-staging-network:
    driver: bridge