OBJETIVO
Implementar en el ChatComposer la visualización de las tools seleccionadas como chips/íconos a la izquierda del botón “+”. Deben ser íconos monocromáticos (SVG, currentColor), con opción de quitar cada tool. Si hay más de 4 tools, colapsar el excedente en un chip “+N”. Mantener orden final a la derecha: [ Mic | Send ]. No romper el layout “textarea arriba + fila de acciones abajo”.

REQUISITOS DE DISEÑO
- Estilo monocromático (negro/gris), sin emojis ni color.
- Chips con borde sutil y fondo semitransparente: `bg-zinc-800/70 border-zinc-700/60 text-zinc-200`.
- Hit-area de botones ≥ 36×36 px. SVG ~20px sin clipping.
- Accesibilidad: aria-labels, title en chips.
- No introducir scroll adicional; respetar el layout actual del ChatComposer (grid de dos filas).

ENTREGABLES (crear/actualizar exactamente estos archivos):

1) src/types/tools.ts
2) src/hooks/useSelectedTools.ts
3) src/components/chat/ChatComposer/ChatComposer.tsx  (actualización)
4) src/components/chat/ChatView.tsx  (ejemplo de uso, si aplica)

CÓDIGO:

--- FILE: src/types/tools.ts ---
import { BookOpen, FilePlus2, HardDrive, Globe, SquarePen, Bot } from "lucide-react";

export type ToolId =
  | "deep-research"
  | "add-files"
  | "google-drive"
  | "web-search"
  | "canvas"
  | "agent-mode";

export type Tool = {
  id: ToolId;
  label: string;
  Icon: (props: { className?: string }) => JSX.Element; // SVG monocromo (currentColor)
};

export const TOOL_REGISTRY: Record<ToolId, Tool> = {
  "deep-research": { id: "deep-research", label: "Deep research", Icon: BookOpen },
  "add-files":     { id: "add-files",     label: "Add files",      Icon: FilePlus2 },
  "google-drive":  { id: "google-drive",  label: "Google Drive",   Icon: HardDrive },
  "web-search":    { id: "web-search",    label: "Web search",     Icon: Globe },
  "canvas":        { id: "canvas",        label: "Canvas",         Icon: SquarePen },
  "agent-mode":    { id: "agent-mode",    label: "Agent mode",     Icon: Bot },
};

--- FILE: src/hooks/useSelectedTools.ts ---
import { useCallback, useState } from "react";
import type { ToolId } from "@/types/tools";

export function useSelectedTools(initial: ToolId[] = []) {
  const [selected, setSelected] = useState<ToolId[]>(initial);

  const addTool = useCallback((id: ToolId) => {
    setSelected((prev) => (prev.includes(id) ? prev : [...prev, id]));
  }, []);

  const removeTool = useCallback((id: ToolId) => {
    setSelected((prev) => prev.filter((t) => t !== id));
  }, []);

  const toggleTool = useCallback((id: ToolId) => {
    setSelected((prev) => (prev.includes(id) ? prev.filter((t) => t !== id) : [...prev, id]));
  }, []);

  const clearTools = useCallback(() => setSelected([]), []);

  return { selected, addTool, removeTool, toggleTool, clearTools };
}

--- FILE: src/components/chat/ChatComposer/ChatComposer.tsx ---
import { useRef, useState } from "react";
import { Plus, Mic, ArrowUp, X } from "lucide-react";
import type { ToolId } from "@/types/tools";
import { TOOL_REGISTRY } from "@/types/tools";

type Props = {
  onSend: (text: string) => Promise<void> | void;
  onOpenTools: () => void;
  selectedTools: ToolId[];             // NUEVO: tools seleccionadas
  onRemoveTool: (id: ToolId) => void;  // NUEVO: quitar tool
  disabled?: boolean;
};

export default function ChatComposer({
  onSend,
  onOpenTools,
  selectedTools,
  onRemoveTool,
  disabled,
}: Props) {
  const [value, setValue] = useState("");
  const [isSending, setIsSending] = useState(false);
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  async function handleSend() {
    const text = value.trim();
    if (!text || disabled) return;
    try {
      setIsSending(true);
      await onSend(text);
      setValue("");
    } finally {
      setIsSending(false);
    }
  }

  function handleKeyDown(e: React.KeyboardEvent<HTMLTextAreaElement>) {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSend();
    }
  }

  function micNotAvailable() {
    // Sustituir por sistema de toasts existente
    alert("Funcionalidad aún no disponible");
  }

  // RENDER de chips/íconos a la izquierda del "+" con colapso +N
  const MAX_VISIBLE = 4;
  const visible = selectedTools.slice(0, MAX_VISIBLE);
  const hiddenCount = Math.max(0, selectedTools.length - MAX_VISIBLE);

  return (
    <div className="w-full sticky bottom-0 bg-transparent px-3 md:px-4 pb-3 md:pb-4 pt-2" aria-label="Chat composer">
      <div className="
          max-w-4xl mx-auto rounded-2xl border border-zinc-700/50
          bg-zinc-900/70 shadow-sm hover:shadow-md focus-within:shadow-md
          backdrop-blur supports-[backdrop-filter]:bg-zinc-900/60
          grid grid-rows-[auto_auto] gap-2 p-2 md:p-3
        ">
        {/* Fila 1: editor */}
        <div className="px-1">
          <textarea
            ref={textareaRef}
            value={value}
            onChange={(e) => setValue(e.target.value)}
            onKeyDown={handleKeyDown}
            placeholder="Type your message..."
            className="w-full bg-transparent text-zinc-100 placeholder-zinc-400 rounded-xl leading-6 resize-none outline-none"
            rows={1}
            aria-label="Message input"
          />
        </div>

        {/* Fila 2: acciones */}
        <div className="flex items-center justify-between px-1">
          {/* IZQUIERDA: chips/íconos seleccionados + botón “+” */}
          <div className="flex items-center gap-2 min-w-0">
            <div className="flex items-center gap-1 overflow-hidden">
              {visible.map((id) => {
                const t = TOOL_REGISTRY[id];
                const Icon = t.Icon;
                return (
                  <div
                    key={id}
                    title={t.label}
                    className="
                      group flex items-center gap-1 pl-2 pr-1 h-9
                      rounded-xl bg-zinc-800/70 border border-zinc-700/60
                      text-zinc-200
                    "
                  >
                    <Icon className="w-4 h-4" />
                    <button
                      type="button"
                      aria-label={`Remove ${t.label}`}
                      onClick={() => onRemoveTool(id)}
                      className="grid place-items-center rounded-lg p-1 hover:bg-zinc-700/60"
                    >
                      <X className="w-3.5 h-3.5" />
                    </button>
                  </div>
                );
              })}
              {hiddenCount > 0 && (
                <div
                  title={`${hiddenCount} more`}
                  className="
                    flex items-center h-9 px-2 rounded-xl
                    bg-zinc-800/70 border border-zinc-700/60 text-zinc-300
                  "
                >
                  +{hiddenCount}
                </div>
              )}
            </div>

            <button
              type="button"
              aria-label="Tools"
              onClick={onOpenTools}
              className="
                min-w-[36px] min-h-[36px] p-2 rounded-xl
                grid place-items-center text-zinc-300 hover:bg-zinc-800/70
              "
            >
              <Plus className="w-5 h-5" />
            </button>
          </div>

          {/* DERECHA: Mic | Send */}
          <div className="flex items-center gap-2">
            <button
              type="button"
              onClick={micNotAvailable}
              aria-label="Voice input (beta)"
              className="min-w-[36px] min-h-[36px] p-2 rounded-xl grid place-items-center text-zinc-300 hover:bg-zinc-800/70"
            >
              <Mic className="w-5 h-5" />
            </button>
            <button
              type="button"
              onClick={handleSend}
              disabled={disabled || isSending || !value.trim()}
              aria-label="Send message"
              className="
                min-w-[40px] min-h-[36px] p-2 rounded-xl grid place-items-center
                bg-emerald-600 hover:bg-emerald-500 text-white
                disabled:opacity-50 disabled:cursor-not-allowed overflow-visible
              "
            >
              <ArrowUp className="w-5 h-5" />
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

--- FILE: src/components/chat/ChatView.tsx ---
import { useCallback } from "react";
import ChatComposer from "@/components/chat/ChatComposer/ChatComposer";
import { useSelectedTools } from "@/hooks/useSelectedTools";
import type { ToolId } from "@/types/tools";

export default function ChatView() {
  const { selected, addTool, removeTool } = useSelectedTools();

  const onOpenTools = useCallback(() => {
    // Aquí debes abrir tu menú de Tools.
    // Cuando el usuario elija una tool, llama a addTool(toolId).
    // Ejemplo temporal:
    // addTool("deep-research");
  }, [/* addTool */]);

  async function handleSend(text: string) {
    // Lógica de envío de mensaje, usando las tools seleccionadas si aplica
    // selected -> ToolId[]
    console.log("SEND:", { text, tools: selected });
  }

  return (
    <div className="flex flex-col h-full">
      {/* ... feed del chat ... */}
      <ChatComposer
        onSend={handleSend}
        onOpenTools={onOpenTools}
        selectedTools={selected}
        onRemoveTool={(id: ToolId) => removeTool(id)}
      />
    </div>
  );
}

CRITERIOS DE ACEPTACIÓN
- Al seleccionar una tool en el menú, aparece un chip/ícono monocromo a la izquierda del “+”.
- Cada chip muestra su ícono y permite quitar la tool con una “X”.
- Con >4 tools, se ven 4 chips y un chip “+N” con el excedente.
- El orden a la derecha permanece [Mic | Send]; no se rompe el layout del compositor.
- Los íconos son SVG monocromos (currentColor), no emojis ni íconos a color.
- Hit-area ≥ 36×36 px, sin clipping de SVGs.

OBSERVACIONES
- Si ya existe un sistema de toasts/tooltip, sustituir alert() en mic por ese sistema.
- Si tu menú de Tools ya gestiona estado, conéctalo a addTool/removeTool.

