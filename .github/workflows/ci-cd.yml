name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  API_IMAGE_NAME: ${{ github.repository }}/api
  WEB_IMAGE_NAME: ${{ github.repository }}/web

jobs:
  # ============================================================================
  # STAGE 1: Test & Quality
  # ============================================================================
  test:
    name: üß™ Tests & Quality
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: test_user
          MONGO_INITDB_ROOT_PASSWORD: test_password
          MONGO_INITDB_DATABASE: copilotos_test
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: üì¶ Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: üì¶ Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: üì¶ Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: üì¶ Install dependencies
        run: |
          pnpm install --frozen-lockfile
          cd apps/api && pip install -r requirements.txt

      - name: üîç Lint Frontend
        run: pnpm --filter web lint || echo "Linting completed with warnings"
        continue-on-error: true

      - name: üîç Lint Backend (Optional)
        run: |
          cd apps/api
          # Skip if requirements for linting are not installed
          pip install flake8 black || true
          python -m flake8 src/ --max-line-length=100 --extend-ignore=E203,W503 || echo "Linting skipped"
          python -m black src/ --check || echo "Black check skipped"
        continue-on-error: true

      - name: üèóÔ∏è Build Frontend
        run: pnpm --filter web build
        env:
          API_BASE_URL: http://localhost:8001
          NEXT_PUBLIC_API_URL: http://localhost:8001

      - name: üß™ Test Backend (Optional)
        run: |
          cd apps/api
          # Skip if tests directory doesn't exist
          if [ -d "tests" ]; then
            pip install pytest pytest-cov || true
            python -m pytest tests/ -v --cov=src --cov-report=xml || echo "Tests skipped"
          else
            echo "No tests directory found, skipping tests"
          fi
        env:
          MONGODB_URL: mongodb://test_user:test_password@localhost:27017/copilotos_test?authSource=admin
          REDIS_URL: redis://localhost:6379/0
          JWT_SECRET_KEY: test-secret-key
        continue-on-error: true

  # ============================================================================
  # STAGE 2: Security Scan
  # ============================================================================
  security:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîç Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: üìä Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ============================================================================
  # STAGE 3: Build & Push Images
  # ============================================================================
  build:
    name: üèóÔ∏è Build & Push
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push'

    outputs:
      api-image: ${{ steps.meta-api.outputs.tags }}
      web-image: ${{ steps.meta-web.outputs.tags }}
      api-digest: ${{ steps.build-api.outputs.digest }}
      web-digest: ${{ steps.build-web.outputs.digest }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîë Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}

      # API Image
      - name: üè∑Ô∏è Extract API metadata
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.API_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: üèóÔ∏è Build and push API image
        id: build-api
        uses: docker/build-push-action@v5
        with:
          context: ./apps/api
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Web Image
      - name: üè∑Ô∏è Extract Web metadata
        id: meta-web
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.WEB_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: üèóÔ∏è Build and push Web image
        id: build-web
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/web/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-web.outputs.tags }}
          labels: ${{ steps.meta-web.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            API_BASE_URL=http://api:8001
            NEXT_PUBLIC_API_URL=${{ secrets.PRODUCTION_API_URL || 'http://localhost:8001' }}

  # ============================================================================
  # STAGE 4: Deploy to Staging
  # ============================================================================
  deploy-staging:
    name: üöÄ Deploy Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üöÄ Deploy to staging server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: ${{ secrets.STAGING_SSH_PORT || 22 }}
          script: |
            cd ${{ secrets.STAGING_DEPLOY_PATH || '/home/jf/copilotos-bridge' }}

            # Update images to latest staging versions
            export API_IMAGE="${{ needs.build.outputs.api-image }}"
            export WEB_IMAGE="${{ needs.build.outputs.web-image }}"

            # Login to registry
            echo "${{ secrets.TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull latest images
            docker pull $API_IMAGE
            docker pull $WEB_IMAGE

            # Deploy with docker-compose
            docker-compose -f docker-compose.staging.yml down
            docker-compose -f docker-compose.staging.yml up -d

            # Health check
            sleep 30
            curl -f http://localhost:8001/api/health || exit 1
            curl -f http://localhost:3000 || exit 1

            echo "‚úÖ Staging deployment successful"

  # ============================================================================
  # STAGE 5: Deploy to Production
  # ============================================================================
  deploy-production:
    name: üöÄ Deploy Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üöÄ Deploy to production server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_SSH_PORT || 22 }}
          script: |
            cd ${{ secrets.PRODUCTION_DEPLOY_PATH || '/home/jf/copilotos-bridge' }}

            # Create backup of current deployment
            docker-compose -f docker-compose.prod.yml down

            # Update images to latest production versions
            export API_IMAGE="${{ needs.build.outputs.api-image }}"
            export WEB_IMAGE="${{ needs.build.outputs.web-image }}"

            # Login to registry
            echo "${{ secrets.TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull latest images
            docker pull $API_IMAGE
            docker pull $WEB_IMAGE

            # Deploy with zero-downtime
            docker-compose -f docker-compose.prod.yml up -d

            # Health check with retries
            for i in {1..10}; do
              if curl -f http://localhost:8001/api/health && curl -f http://localhost:3000; then
                echo "‚úÖ Production deployment successful"
                exit 0
              fi
              echo "‚è≥ Waiting for services to be ready... ($i/10)"
              sleep 30
            done

            echo "‚ùå Production deployment failed health checks"
            exit 1

      - name: üì¢ Notify deployment success
        if: success()
        run: |
          echo "üéâ Production deployment completed successfully!"
          echo "API: ${{ needs.build.outputs.api-image }}"
          echo "Web: ${{ needs.build.outputs.web-image }}"

  # ============================================================================
  # STAGE 6: Post-deployment Tests
  # ============================================================================
  smoke-tests:
    name: üí® Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: üì¶ Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: üì¶ Install dependencies
        run: pnpm install --frozen-lockfile

      - name: üî• Basic smoke tests against staging
        if: needs.deploy-staging.result == 'success'
        run: |
          # Basic health checks
          curl -f ${{ secrets.STAGING_API_URL || 'http://34.42.214.246:8001' }}/api/health || echo "API health check failed"
          curl -f ${{ secrets.STAGING_URL || 'http://34.42.214.246:3000' }} || echo "Web health check failed"
        continue-on-error: true

      - name: üî• Basic smoke tests against production
        if: needs.deploy-production.result == 'success'
        run: |
          # Basic health checks
          curl -f ${{ secrets.PRODUCTION_API_URL || 'http://34.42.214.246:8001' }}/api/health || echo "API health check failed"
          curl -f ${{ secrets.PRODUCTION_URL || 'http://34.42.214.246:3000' }} || echo "Web health check failed"
        continue-on-error: true