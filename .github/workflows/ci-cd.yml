name: CI + CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  # ============================================================================
  # Backend Tests
  # ============================================================================
  backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/api

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: apps/api/requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-mock httpx safety

      - name: Security audit with Safety
        run: |
          safety check --ignore 64459 --ignore 64396

      - name: Run tests
        run: |
          pytest -q --cov=src --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov (optional)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: codecov/codecov-action@v4
        with:
          file: apps/api/coverage.xml
          flags: backend
          fail_ci_if_error: false
        continue-on-error: true

  # ============================================================================
  # Frontend Tests
  # ============================================================================
  frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure frontend environment
        run: |
          echo "NEXT_PUBLIC_API_URL=http://localhost:8001" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_ENABLE_MSW=false" >> $GITHUB_ENV

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check
        run: pnpm --filter web typecheck

      - name: Lint
        run: pnpm --filter web lint

      - name: Run tests
        run: pnpm --filter web test -- --coverage

      - name: Upload coverage to Codecov (optional)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: codecov/codecov-action@v4
        with:
          directory: apps/web/coverage
          flags: frontend
          fail_ci_if_error: false
        continue-on-error: true

  # ============================================================================
  # Integration Tests (Docker Compose)
  # ============================================================================
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create environment file for CI
        run: |
          cp envs/.env.local.example envs/.env || true
          echo "MONGODB_PASSWORD=test_password" >> envs/.env
          echo "REDIS_PASSWORD=test_password" >> envs/.env
          echo "JWT_SECRET_KEY=$(openssl rand -hex 32)" >> envs/.env
          echo "API_KEY=$(openssl rand -hex 16)" >> envs/.env

      - name: Start services
        run: |
          docker compose -f infra/docker-compose.yml up -d --wait
          sleep 10

      - name: Run integration smoke tests
        run: VERIFY_INCLUDE_DEV=false make verify

      - name: Show running containers
        if: always()
        run: docker compose -f infra/docker-compose.yml ps

      - name: Teardown
        if: always()
        run: docker compose -f infra/docker-compose.yml down -v

  # ============================================================================
  # E2E Tests (Playwright - Optional)
  # ============================================================================
  e2e:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    # Run on main, or on PRs explicitly labeled run-e2e
    if: |
      github.ref == 'refs/heads/main' ||
      (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'run-e2e'))

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm --filter web exec playwright install --with-deps

      - name: Create environment file for CI
        run: |
          cp envs/.env.local.example envs/.env || true
          echo "MONGODB_PASSWORD=test_password" >> envs/.env
          echo "REDIS_PASSWORD=test_password" >> envs/.env
          echo "JWT_SECRET_KEY=$(openssl rand -hex 32)" >> envs/.env
          echo "API_KEY=$(openssl rand -hex 16)" >> envs/.env

      - name: Start services
        run: docker compose -f infra/docker-compose.yml up -d --wait

      - name: Create demo user
        run: make create-demo-user || true

      - name: Run E2E tests (Files V1)
        run: pnpm --filter web test:e2e --project=files-v1 --reporter=dot

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: apps/web/playwright-report/
          retention-days: 7

      - name: Teardown
        if: always()
        run: docker compose -f infra/docker-compose.yml down -v

  # ============================================================================
  # Deploy to Production (tar-based)
  # ============================================================================
  deploy_tar:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend, frontend, integration]
    # Only deploy on push to main
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PROD_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          # Extract host from PROD_SERVER (format: user@host)
          HOST=$(echo "${{ secrets.PROD_SERVER }}" | cut -d'@' -f2)
          ssh-keyscan -H "$HOST" >> ~/.ssh/known_hosts

      - name: Package application (no secrets)
        run: make package

      - name: Upload package to server
        env:
          PROD_SERVER: ${{ secrets.PROD_SERVER }}
          PROD_DEPLOY_PATH: ${{ secrets.PROD_DEPLOY_PATH }}
        run: |
          PKG=$(ls -1t *.tar.gz | head -n1)
          echo "Uploading $PKG to $PROD_SERVER:$PROD_DEPLOY_PATH/incoming/"
          scp -o StrictHostKeyChecking=no -q "$PKG" "$PKG.sha256" "$PROD_SERVER:$PROD_DEPLOY_PATH/incoming/"

      - name: Deploy on remote server
        env:
          PROD_SERVER: ${{ secrets.PROD_SERVER }}
          PROD_DEPLOY_PATH: ${{ secrets.PROD_DEPLOY_PATH }}
        run: |
          PKG=$(ls -1t *.tar.gz | head -n1)
          ssh "$PROD_SERVER" "export APP_NAME=copilotos-bridge; export PROD_DEPLOY_PATH=$PROD_DEPLOY_PATH; bash $PROD_DEPLOY_PATH/scripts/deploy-with-tar.sh $PKG"

      - name: Verify deployment health
        env:
          PROD_SERVER: ${{ secrets.PROD_SERVER }}
        run: |
          echo "Waiting for services to be healthy..."
          sleep 10

          echo "Checking API health..."
          if ssh "$PROD_SERVER" "curl -fsS http://localhost:8001/api/health"; then
            echo "✓ API is healthy"
          else
            echo "✗ API health check failed"
            exit 1
          fi

          echo "Checking Web health..."
          if ssh "$PROD_SERVER" "curl -fsS http://localhost:3000"; then
            echo "✓ Web is healthy"
          else
            echo "✗ Web health check failed"
            exit 1
          fi

      - name: Clean up local packages
        if: always()
        run: make clean-packages

  # ============================================================================
  # Security Scan (Optional)
  # ============================================================================
  # Note: Uploading SARIF results requires GitHub Advanced Security to be enabled.
  # If not available, the scan will still run but results won't be uploaded.
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    # Run on PRs and main branch
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true
