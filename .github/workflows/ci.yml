# =========================================
# CI/CD PIPELINE FOR COPILOT OS
# =========================================
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/saptiva-ai/copilotos-bridge

jobs:
  # =========================================
  # SECURITY AND QUALITY CHECKS
  # =========================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  # =========================================
  # BACKEND TESTS AND QUALITY
  # =========================================
  backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: apps/api/requirements.txt

      - name: Install dependencies
        working-directory: apps/api
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov ruff safety

      - name: Lint with Ruff
        working-directory: apps/api
        run: ruff check .

      - name: Security check with Safety
        working-directory: apps/api
        run: safety check

      - name: Run tests
        working-directory: apps/api
        run: pytest tests/ --cov=src --cov-report=xml

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: apps/api/coverage.xml
          flags: backend

  # =========================================
  # FRONTEND TESTS AND QUALITY
  # =========================================
  frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.0

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm --filter web lint

      - name: Type check
        run: pnpm --filter web typecheck

      - name: Build
        run: pnpm --filter web build

      - name: Run tests
        run: pnpm --filter web test --coverage

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v4
        with:
          file: apps/web/coverage/coverage-final.json
          flags: frontend
          fail_ci_if_error: false

  # =========================================
  # DOCKER BUILD AND PUSH
  # =========================================
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [security, backend, frontend]
    if: github.event_name == 'push'
    outputs:
      api-image: ${{ steps.meta-api.outputs.tags }}
      web-image: ${{ steps.meta-web.outputs.tags }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # =========================================
      # API IMAGE
      # =========================================
      - name: Extract API metadata
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}/api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: apps/api
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # =========================================
      # WEB IMAGE
      # =========================================
      - name: Extract Web metadata
        id: meta-web
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}/web
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Web image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/web/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-web.outputs.tags }}
          labels: ${{ steps.meta-web.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # =========================================
  # END-TO-END TESTS
  # =========================================
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    strategy:
      fail-fast: false
      matrix:
        project: [chromium, firefox, api]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.0

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps ${{ matrix.project }}

      - name: Set up test environment
        run: |
          echo "SAPTIVA_API_KEY=demo-key-for-testing" >> .env.test
          echo "JWT_SECRET_KEY=test-jwt-secret-key-for-e2e-tests" >> .env.test
          echo "MONGODB_URL=mongodb://copilotos_user:secure_password_change_me@localhost:27017/copilotos_test" >> .env.test
          echo "REDIS_URL=redis://localhost:6379/1" >> .env.test
          echo "LOG_LEVEL=error" >> .env.test
          echo "NODE_ENV=test" >> .env.test
          echo "BASE_URL=http://localhost:3000" >> .env.test
          echo "API_BASE_URL=http://localhost:8001" >> .env.test

      - name: Start services
        run: |
          docker compose -f infra/docker-compose.yml up -d mongodb redis
          sleep 10

          # Wait for MongoDB and Redis to be ready
          timeout 60 bash -c 'until docker exec copilotos-mongodb mongosh --eval "db.runCommand('\''ping'\'')" > /dev/null 2>&1; do sleep 2; done'
          timeout 30 bash -c 'until docker exec copilotos-redis redis-cli ping > /dev/null 2>&1; do sleep 2; done'

      - name: Start API
        run: |
          cd apps/api
          pip install -r requirements.txt
          python -m uvicorn src.main:app --host 0.0.0.0 --port 8001 &
          sleep 10

      - name: Wait for API health
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8001/api/health > /dev/null 2>&1; do sleep 2; echo "Waiting for API..."; done'

      - name: Start Frontend
        run: |
          pnpm --filter web build
          pnpm --filter web start &
          sleep 10

      - name: Wait for Frontend
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000 > /dev/null 2>&1; do sleep 2; echo "Waiting for Frontend..."; done'

      - name: Run E2E tests
        run: pnpm exec playwright test --project=${{ matrix.project }} --reporter=github,html,junit
        env:
          BASE_URL: http://localhost:3000
          API_BASE_URL: http://localhost:8001

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.project }}
          path: |
            playwright-report/
            test-results/
          retention-days: 7

      - name: Upload test results to GitHub
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: E2E Tests (${{ matrix.project }})
          path: test-results/e2e-results.xml
          reporter: java-junit

      - name: Cleanup
        if: always()
        run: |
          pkill -f "uvicorn\|next" || true
          docker compose -f infra/docker-compose.yml down --volumes

  # =========================================
  # DEPLOYMENT
  # =========================================
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [docker, e2e]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "🚀 Production deployment would happen here"
          echo "Images ready for deployment:"
          echo "API: ${{ needs.docker.outputs.api-image }}"
          echo "Web: ${{ needs.docker.outputs.web-image }}"
          # Add actual deployment logic here

  # =========================================
  # NOTIFICATION
  # =========================================
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [security, backend, frontend, docker]
    if: always()
    steps:
      - name: Notify success
        if: needs.docker.result == 'success'
        run: |
          echo "✅ CI/CD Pipeline completed successfully"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"

      - name: Notify failure
        if: failure()
        run: |
          echo "❌ CI/CD Pipeline failed"
          echo "Check the logs for more details"
