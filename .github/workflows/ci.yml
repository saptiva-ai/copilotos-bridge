# =========================================
# CI/CD PIPELINE FOR COPILOT OS
# =========================================
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/saptiva-ai/copilotos-bridge

jobs:
  # =========================================
  # SECURITY AND QUALITY CHECKS
  # =========================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          ignore-unfixed: true

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  # =========================================
  # BACKEND TESTS AND QUALITY
  # =========================================
  backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: apps/api/requirements.txt

      - name: Install dependencies
        working-directory: apps/api
        run: pip install -r requirements.txt

      - name: Security check with Safety
        working-directory: apps/api
        run: safety check --ignore 64459 --ignore 64396

      - name: Run tests
        working-directory: apps/api
        run: pytest tests/ --cov=src --cov-report=xml

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: apps/api/coverage.xml
          flags: backend
          token: ${{ secrets.CODECOV_TOKEN }}

  # =========================================
  # FRONTEND TESTS AND QUALITY
  # =========================================
  frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm --filter web lint

      - name: Type check
        run: pnpm --filter web typecheck

      - name: Build
        run: pnpm --filter web build

      - name: Run tests
        run: pnpm --filter web test --coverage

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v4
        with:
          file: apps/web/coverage/lcov.info
          flags: frontend
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  # =========================================
  # DOCKER BUILD AND PUSH
  # =========================================
  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [security, backend, frontend]
    outputs:
      api-image: ${{ steps.meta-api.outputs.tags }}
      web-image: ${{ steps.meta-web.outputs.tags }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract API metadata
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}/api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: apps/api
          platforms: linux/amd64
          push: ${{ github.event_name == 'push' }}
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract Web metadata
        id: meta-web
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}/web
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Web image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/web/Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name == 'push' }}
          tags: ${{ steps.meta-web.outputs.tags }}
          labels: ${{ steps.meta-web.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # =========================================
  # END-TO-END TESTS
  # =========================================
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [docker]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps

      - name: Start services and run tests
        run: |
          docker compose -f infra/docker-compose.yml -f docker-compose.test.yml --profile testing up --build --abort-on-container-exit
        env:
          API_IMAGE_TAG: ${{ needs.docker.outputs.api-image }}
          WEB_IMAGE_TAG: ${{ needs.docker.outputs.web-image }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: |
            playwright-report/
            test-results/
          retention-days: 7

  # =========================================
  # DEPLOYMENT
  # =========================================
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [docker, e2e]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "🚀 Production deployment would happen here"
          echo "Images ready for deployment:"
          echo "API: ${{ needs.docker.outputs.api-image }}"
          echo "Web: ${{ needs.docker.outputs.web-image }}"
          # Add actual deployment logic here

  # =========================================
  # NOTIFICATION
  # =========================================
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [security, backend, frontend, docker, e2e, deploy]
    if: always()
    steps:
      - name: Notify on success
        if: >
          needs.security.result != 'failure' &&
          needs.backend.result != 'failure' &&
          needs.frontend.result != 'failure' &&
          needs.docker.result != 'failure' &&
          needs.e2e.result != 'failure' &&
          needs.deploy.result != 'failure'
        run: echo "✅ CI/CD Pipeline completed successfully for ${{ github.ref_name }}"

      - name: Notify on failure
        if: failure()
        run: echo "❌ CI/CD Pipeline failed for ${{ github.ref_name }}. Check logs for details."