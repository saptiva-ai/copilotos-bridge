# ========================================
# COPILOT OS - BASE DOCKER COMPOSE
# ========================================
# Archivo canónico para levantar la plataforma completa (dev, testing, prod).
# Usa perfiles de Docker Compose para habilitar servicios adicionales cuando se necesitan.
#   Desarrollo: make dev / docker compose -f infra/docker-compose.yml up -d
#   Testing:    docker compose -f infra/docker-compose.yml --profile testing up --build
#   Producción: docker compose -f infra/docker-compose.yml --profile production up -d

services:
  # ========================================
  # MONGODB DATABASE
  # ========================================
  mongodb:
    image: mongo:7.0
    container_name: ${COMPOSE_PROJECT_NAME:-copilotos}-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER:-copilotos_user}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD:-secure_password_change_me}
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE:-copilotos}
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    ports:
      - "${MONGODB_PORT:-27018}:27017"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - copilotos-network

  # ========================================
  # REDIS CACHE
  # ========================================
  redis:
    image: redis:7-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-copilotos}-redis
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD:-redis_password_change_me}
      --maxmemory ${REDIS_MAX_MEMORY:-256mb}
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    ports:
      - "${REDIS_PORT:-6380}:6379"
    networks:
      - copilotos-network

  # ========================================
  # FASTAPI BACKEND
  # ========================================
  api:
    build:
      context: ../apps/api
      dockerfile: Dockerfile
      target: production
    container_name: ${COMPOSE_PROJECT_NAME:-copilotos}-api
    restart: unless-stopped
    env_file:
      - ../envs/.env
    environment:
      # Base de datos
      - MONGODB_URL=mongodb://${MONGODB_USER:-copilotos_user}:${MONGODB_PASSWORD:-secure_password_change_me}@mongodb:27017/${MONGODB_DATABASE:-copilotos}?authSource=admin
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_change_me}@redis:6379/0

      # Autenticación
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-dev-jwt-secret-change-in-production}
      - SECRET_KEY=${SECRET_KEY:-dev-secret-change-in-production}
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${JWT_ACCESS_TOKEN_EXPIRE_MINUTES:-60}
      - JWT_REFRESH_TOKEN_EXPIRE_DAYS=${JWT_REFRESH_TOKEN_EXPIRE_DAYS:-7}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}

      # CORS y Hosts permitidos
      - CORS_ORIGINS=${CORS_ORIGINS:-["http://localhost:3000"]}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-["localhost","127.0.0.1","web","api"]}

      # Logging y debug
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - DEBUG=${DEBUG:-false}

      # Integraciones externas
      - ALETHEIA_BASE_URL=${ALETHEIA_BASE_URL:-http://localhost:8000}
      - ALETHEIA_API_KEY=${ALETHEIA_API_KEY:-}
      - ALETHEIA_TIMEOUT=${ALETHEIA_TIMEOUT:-120}
      - ALETHEIA_MAX_RETRIES=${ALETHEIA_MAX_RETRIES:-3}

      # Deep Research Feature Flags (P0-DR-KILL-001)
      # GLOBAL KILL SWITCH - dominates all other flags
      - DEEP_RESEARCH_KILL_SWITCH=${DEEP_RESEARCH_KILL_SWITCH:-true}
      # Legacy flags (only active when kill switch is false)
      - DEEP_RESEARCH_ENABLED=${DEEP_RESEARCH_ENABLED:-false}
      - DEEP_RESEARCH_AUTO=${DEEP_RESEARCH_AUTO:-false}
      - DEEP_RESEARCH_COMPLEXITY_THRESHOLD=${DEEP_RESEARCH_COMPLEXITY_THRESHOLD:-0.7}

      # Chat Configuration (P0-CHAT-BASE-004)
      - CHAT_DEFAULT_MODEL=${CHAT_DEFAULT_MODEL:-Saptiva Turbo}
      - CHAT_ALLOWED_MODELS=${CHAT_ALLOWED_MODELS:-Saptiva Turbo,Saptiva Cortex,Saptiva Ops,Saptiva Coder,Saptiva Legacy}

      - SAPTIVA_BASE_URL=${SAPTIVA_BASE_URL:-https://api.saptiva.com}
      # SAPTIVA_API_KEY is loaded from env_file automatically
      - SAPTIVA_TIMEOUT=${SAPTIVA_TIMEOUT:-30}
      - SAPTIVA_MAX_RETRIES=${SAPTIVA_MAX_RETRIES:-3}

      # Rate limiting (disabled in development for better DX)
      - RATE_LIMIT_ENABLED=${RATE_LIMIT_ENABLED:-false}
      - RATE_LIMIT_CALLS=${RATE_LIMIT_CALLS:-1000}
      - RATE_LIMIT_PERIOD=${RATE_LIMIT_PERIOD:-60}

      # Observabilidad
      - OTEL_SERVICE_NAME=${OTEL_SERVICE_NAME:-copilotos-bridge}
      - JAEGER_ENDPOINT=${JAEGER_ENDPOINT:-http://localhost:14268/api/traces}

    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy

    ports:
      - "${API_PORT:-8001}:8001"

    # TEMPORARY: Mount source code for development to bypass Docker build cache issues
    # V1: Disabled to use built code with pypdf installed
    # volumes:
    #   - ../apps/api/src:/app/src:ro

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

    networks:
      - copilotos-network

  # ========================================
  # NEXT.JS FRONTEND
  # ========================================
  web:
    build:
      context: ..
      dockerfile: apps/web/Dockerfile
      target: dev
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://api:8001}
        NODE_ENV: ${NODE_ENV:-development}
        UID: ${UID:-1000}
        GID: ${GID:-1000}
    container_name: ${COMPOSE_PROJECT_NAME:-copilotos}-web
    restart: unless-stopped
    user: "${UID:-1000}:${GID:-1000}"
    env_file:
      - ../envs/.env
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - API_BASE_URL=http://api:8001
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8001}
      - NEXT_PUBLIC_APP_NAME=${NEXT_PUBLIC_APP_NAME:-Saptiva Copilot OS}
      - NEXT_PUBLIC_APP_VERSION=${NEXT_PUBLIC_APP_VERSION:-1.0.0}
      - NEXT_PUBLIC_ENABLE_STREAMING=${NEXT_PUBLIC_ENABLE_STREAMING:-true}
      - NEXT_PUBLIC_ENABLE_DEEP_RESEARCH=${NEXT_PUBLIC_ENABLE_DEEP_RESEARCH:-true}
      - NEXT_PUBLIC_DEFAULT_MODEL=${NEXT_PUBLIC_DEFAULT_MODEL:-SAPTIVA_CORTEX}
      - UID=${UID:-1000}
      - GID=${GID:-1000}

      # Deep Research Kill Switch (client-side awareness only)
      - DEEP_RESEARCH_ENABLED=${DEEP_RESEARCH_ENABLED:-false}

      # SAPTIVA Configuration (ENV-only per security requirements)
      - SAPTIVA_API_KEY=${SAPTIVA_API_KEY:-}
      - NEXT_PUBLIC_SAPTIVA_API_KEY=${NEXT_PUBLIC_SAPTIVA_API_KEY:-}
      - NEXT_PUBLIC_SAPTIVA_BASE_URL=${NEXT_PUBLIC_SAPTIVA_BASE_URL:-https://api.saptiva.com}

    ports:
      - "${WEB_PORT:-3000}:3000"

    # Note: Volumes removed to support both dev and production modes
    # Dev mode: Next.js dev server handles its own .next directory
    # Production mode: Standalone build has .next baked into image
    # volumes:
    #   - next_cache:/app/apps/web/.next
    #   - next_standalone_cache:/tmp/next-cache

    depends_on:
      api:
        condition: service_healthy

    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

    networks:
      - copilotos-network

  # ========================================
  # PRODUCTION EDGE (NGINX)
  # ========================================
  nginx:
    image: nginx:1.25-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-copilotos}-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/dev.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx_cache:/var/cache/nginx
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - web
      - api
    profiles:
      - production
    networks:
      - copilotos-network

  # ========================================
  # TESTING UTILITIES
  # ========================================
  playwright:
    build:
      context: ..
      dockerfile: tests/Dockerfile.playwright
    container_name: ${COMPOSE_PROJECT_NAME:-copilotos}-playwright
    environment:
      - PLAYWRIGHT_BASE_URL=http://web:3000
      - API_BASE_URL=http://api:8001
    volumes:
      - ../tests:/app/tests
      - ../playwright-report:/app/playwright-report
    depends_on:
      web:
        condition: service_healthy
      api:
        condition: service_healthy
    profiles:
      - testing
    networks:
      - copilotos-network

# ========================================
# VOLUMES
# ========================================
volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
  nginx_cache:
    driver: local
  # Next.js build cache volumes to avoid permission issues
  next_cache:
    driver: local
  next_standalone_cache:
    driver: local

# ========================================
# NETWORKS
# ========================================
networks:
  copilotos-network:
    driver: bridge
