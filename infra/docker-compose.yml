# ========================================
# COPILOT OS - BASE DOCKER COMPOSE
# ========================================
# Este archivo contiene la configuración base común para todos los entornos.
# Para desarrollo local, se carga automáticamente docker-compose.override.yml
# Para otros entornos, usar: docker compose -f docker-compose.yml -f docker-compose.<env>.yml

services:
  # ========================================
  # MONGODB DATABASE
  # ========================================
  mongodb:
    image: mongo:6.0
    container_name: ${COMPOSE_PROJECT_NAME:-copilotos}-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER:-copilotos_user}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD:-secure_password_change_me}
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE:-copilotos}
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - copilotos-network

  # ========================================
  # REDIS CACHE
  # ========================================
  redis:
    image: redis:7-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-copilotos}-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_change_me}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - copilotos-network

  # ========================================
  # FASTAPI BACKEND
  # ========================================
  api:
    build:
      context: ../apps/api
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME:-copilotos}-api
    restart: unless-stopped
    environment:
      # Base de datos
      - MONGODB_URL=mongodb://${MONGODB_USER:-copilotos_user}:${MONGODB_PASSWORD:-secure_password_change_me}@mongodb:27017/${MONGODB_DATABASE:-copilotos}?authSource=admin
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_change_me}@redis:6379/0

      # Autenticación
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-dev-jwt-secret-change-in-production}
      - SECRET_KEY=${SECRET_KEY:-dev-secret-change-in-production}
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${JWT_ACCESS_TOKEN_EXPIRE_MINUTES:-60}
      - JWT_REFRESH_TOKEN_EXPIRE_DAYS=${JWT_REFRESH_TOKEN_EXPIRE_DAYS:-7}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}

      # CORS y Hosts permitidos
      - CORS_ORIGINS=${CORS_ORIGINS:-["http://localhost:3000"]}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-["localhost","127.0.0.1","web","api"]}

      # Logging y debug
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - DEBUG=${DEBUG:-false}

      # Integraciones externas
      - ALETHEIA_BASE_URL=${ALETHEIA_BASE_URL:-http://localhost:8000}
      - ALETHEIA_API_KEY=${ALETHEIA_API_KEY:-}
      - ALETHEIA_TIMEOUT=${ALETHEIA_TIMEOUT:-120}
      - ALETHEIA_MAX_RETRIES=${ALETHEIA_MAX_RETRIES:-3}

      - SAPTIVA_BASE_URL=${SAPTIVA_BASE_URL:-https://api.saptiva.com}
      - SAPTIVA_API_KEY=${SAPTIVA_API_KEY}
      - SAPTIVA_TIMEOUT=${SAPTIVA_TIMEOUT:-30}
      - SAPTIVA_MAX_RETRIES=${SAPTIVA_MAX_RETRIES:-3}

      # Rate limiting
      - RATE_LIMIT_REQUESTS_PER_MINUTE=${RATE_LIMIT_REQUESTS_PER_MINUTE:-100}

      # Observabilidad
      - OTEL_SERVICE_NAME=${OTEL_SERVICE_NAME:-copilotos-bridge}
      - JAEGER_ENDPOINT=${JAEGER_ENDPOINT:-http://localhost:14268/api/traces}

    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy

    ports:
      - "8001:8001"

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    networks:
      - copilotos-network

  # ========================================
  # NEXT.JS FRONTEND
  # ========================================
  web:
    build:
      context: ..
      dockerfile: apps/web/Dockerfile
      args:
        API_BASE_URL: http://api:8001
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8001}
        NEXT_PUBLIC_SAPTIVA_API_KEY: ${NEXT_PUBLIC_SAPTIVA_API_KEY:-}
    container_name: ${COMPOSE_PROJECT_NAME:-copilotos}-web
    restart: unless-stopped
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - API_BASE_URL=http://api:8001
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8001}
      - NEXT_PUBLIC_APP_NAME=${NEXT_PUBLIC_APP_NAME:-Saptiva Copilot OS}
      - NEXT_PUBLIC_APP_VERSION=${NEXT_PUBLIC_APP_VERSION:-1.0.0}
      - NEXT_PUBLIC_ENABLE_STREAMING=${NEXT_PUBLIC_ENABLE_STREAMING:-true}
      - NEXT_PUBLIC_ENABLE_DEEP_RESEARCH=${NEXT_PUBLIC_ENABLE_DEEP_RESEARCH:-true}
      - NEXT_PUBLIC_DEFAULT_MODEL=${NEXT_PUBLIC_DEFAULT_MODEL:-SAPTIVA_CORTEX}

      # SAPTIVA Configuration (ENV-only per security requirements)
      - SAPTIVA_API_KEY=${SAPTIVA_API_KEY}
      - NEXT_PUBLIC_SAPTIVA_API_KEY=${NEXT_PUBLIC_SAPTIVA_API_KEY:-}
      - NEXT_PUBLIC_SAPTIVA_BASE_URL=${NEXT_PUBLIC_SAPTIVA_BASE_URL:-https://api.saptiva.com}

    ports:
      - "3000:3000"

    depends_on:
      api:
        condition: service_healthy

    networks:
      - copilotos-network

# ========================================
# VOLUMES
# ========================================
volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

# ========================================
# NETWORKS
# ========================================
networks:
  copilotos-network:
    driver: bridge
