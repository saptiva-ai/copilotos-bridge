# ========================================
# PRODUCTION ENVIRONMENT
# ========================================
# Configuración para entorno de producción
# Comando: docker compose -f infra/docker-compose.yml -f infra/docker-compose.prod.yml --env-file envs/.env.prod up -d

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: copilotos-mongodb-prod
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
      MONGO_INITDB_DATABASE: copilotos
    volumes:
      - mongodb_prod_data:/data/db
      - mongodb_prod_config:/data/configdb
      - ./infra/mongodb/mongod.conf:/etc/mongod.conf:ro
    command: ["mongod", "--config", "/etc/mongod.conf"]
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - copilotos-prod-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: copilotos-redis-prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_prod_data:/data
      - ./infra/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - copilotos-prod-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # FastAPI Backend
  api:
    image: ${API_IMAGE:-ghcr.io/jazielflo/copilotos-bridge/api:latest}
    container_name: copilotos-api-prod
    restart: unless-stopped
    # ports exposed only internally for nginx
    expose:
      - "8001"
    environment:
      - MONGODB_URL=mongodb://${MONGODB_USER}:${MONGODB_PASSWORD}@mongodb:27017/copilotos?authSource=admin
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${JWT_EXPIRE_MINUTES:-60}
      - JWT_REFRESH_TOKEN_EXPIRE_DAYS=${JWT_REFRESH_DAYS:-7}
      - JWT_ALGORITHM=HS256
      - CORS_ORIGINS=${CORS_ORIGINS}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - DEBUG=false
      - ALETHEIA_BASE_URL=${ALETHEIA_BASE_URL}
      - ALETHEIA_API_KEY=${ALETHEIA_API_KEY}
      - ALETHEIA_TIMEOUT=${ALETHEIA_TIMEOUT:-180}
      - ALETHEIA_MAX_RETRIES=${ALETHEIA_MAX_RETRIES:-5}
      - SAPTIVA_BASE_URL=https://api.saptiva.com
      - SAPTIVA_API_KEY=${SAPTIVA_API_KEY}
      - SAPTIVA_TIMEOUT=${SAPTIVA_TIMEOUT:-60}
      - SAPTIVA_MAX_RETRIES=${SAPTIVA_MAX_RETRIES:-5}
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_CALLS=${RATE_LIMIT_REQUESTS_PER_MINUTE:-100}
      - RATE_LIMIT_PERIOD=60
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-52428800}
      - SECURE_COOKIES=false
      - HTTPS_ONLY=false
      - DEV_MODE=false
      - USE_MEMORY_DB=false
      - MOCK_ALETHEIA=false
      - OTEL_SERVICE_NAME=copilotos-bridge-production
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_ENDPOINT:-http://jaeger:4317}
      - SENTRY_DSN=${SENTRY_DSN}
      - SENTRY_ENVIRONMENT=production
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - copilotos-prod-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    # labels:
      # - "traefik.enable=true"
      # - "traefik.http.routers.api-prod.rule=Host(`api.${DOMAIN}`)"
      # - "traefik.http.routers.api-prod.tls=true"
      # - "traefik.http.routers.api-prod.tls.certresolver=letsencrypt"
      # - "traefik.http.services.api-prod.loadbalancer.server.port=8001"
      # - "traefik.http.middlewares.api-prod-ratelimit.ratelimit.burst=100"

  # Next.js Frontend
  web:
    image: ${WEB_IMAGE:-ghcr.io/jazielflo/copilotos-bridge/web:latest}
    container_name: copilotos-web-prod
    restart: unless-stopped
    # ports exposed only internally for nginx
    expose:
      - "3000"
    environment:
      - NODE_ENV=production
      - API_BASE_URL=http://api:8001
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_APP_NAME=SAPTIVA Copilot OS
      - NEXT_PUBLIC_APP_DESCRIPTION=Chat UI + Aletheia Deep Research
      - NEXT_PUBLIC_FEATURE_REPORT_DOWNLOAD=true
      - NEXT_PUBLIC_ENVIRONMENT=production
      - NEXT_PUBLIC_APP_VERSION=${APP_VERSION:-latest}
      - NEXT_PUBLIC_ANALYTICS_ID=${ANALYTICS_ID:-}
      - NEXT_PUBLIC_SENTRY_DSN=${SENTRY_DSN:-}
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - copilotos-prod-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    # labels:
      # - "traefik.enable=true"
      # - "traefik.http.routers.web-prod.rule=Host(`${DOMAIN}`)"
      # - "traefik.http.routers.web-prod.tls=true"
      # - "traefik.http.routers.web-prod.tls.certresolver=letsencrypt"
      # - "traefik.http.services.web-prod.loadbalancer.server.port=3000"
      # - "traefik.http.middlewares.web-prod-compress.compress=true"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: copilotos-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - web
      - api
    networks:
      - copilotos-prod-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  mongodb_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/copilotos-bridge/data/mongodb
  mongodb_prod_config:
    driver: local
  redis_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/copilotos-bridge/data/redis

networks:
  copilotos-prod-network:
    driver: bridge
