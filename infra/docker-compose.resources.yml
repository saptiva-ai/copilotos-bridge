# ============================================================================
# Docker Compose - Resource Limits Configuration
# ============================================================================
# This file adds resource limits to prevent memory leaks and ensure stability.
#
# Usage:
#   Development (optional limits):
#     docker compose -f infra/docker-compose.yml -f infra/docker-compose.dev.yml -f infra/docker-compose.resources.yml up
#
#   Production (recommended):
#     docker compose -f infra/docker-compose.yml -f infra/docker-compose.resources.yml up
#
#   Via Makefile:
#     COMPOSE_RESOURCES=1 make dev        # Development with limits
#     COMPOSE_RESOURCES=1 make prod       # Production with limits
#
# ============================================================================

services:
  api:
    deploy:
      resources:
        limits:
          cpus: '1.0'        # Maximum 1 CPU core
          memory: 512M       # Maximum 512 MB RAM
        reservations:
          cpus: '0.25'       # Minimum 25% of 1 core
          memory: 128M       # Minimum 128 MB RAM
    # Healthcheck with resource awareness
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  web:
    deploy:
      resources:
        limits:
          cpus: '1.0'        # Maximum 1 CPU core
          memory: 1G         # Maximum 1 GB RAM (Next.js needs more for builds)
        reservations:
          cpus: '0.25'       # Minimum 25% of 1 core
          memory: 256M       # Minimum 256 MB RAM
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s     # Next.js takes longer to start

  mongodb:
    deploy:
      resources:
        limits:
          cpus: '1.0'        # Maximum 1 CPU core
          memory: 512M       # Maximum 512 MB RAM
        reservations:
          cpus: '0.25'       # Minimum 25% of 1 core
          memory: 256M       # Minimum 256 MB RAM
    # Configure WiredTiger cache size to respect memory limit
    command: >
      mongod
      --bind_ip_all
      --wiredTigerCacheSizeGB 0.25
      --wiredTigerCheckpointDelaySecs 60
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    deploy:
      resources:
        limits:
          cpus: '0.5'        # Maximum 0.5 CPU cores (Redis is single-threaded)
          memory: 128M       # Maximum 128 MB RAM
        reservations:
          cpus: '0.1'        # Minimum 10% of 1 core
          memory: 32M        # Minimum 32 MB RAM
    # Configure Redis memory limits
    command: >
      redis-server
      --maxmemory 100mb
      --maxmemory-policy allkeys-lru
      --save ""
      --appendonly no
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

# ============================================================================
# NOTES
# ============================================================================
#
# Resource Allocation Strategy:
# - API: 512 MB max - FastAPI is lightweight, sufficient for most workloads
# - Web: 1 GB max - Next.js needs more for SSR and bundling
# - MongoDB: 512 MB max - WiredTiger cache limited to 256 MB for efficiency
# - Redis: 128 MB max - Configured with LRU eviction, no persistence for speed
#
# CPU Limits:
# - All services limited to 1 core max to prevent CPU monopolization
# - Reservations ensure minimum guaranteed resources
#
# Benefits:
# - Prevents memory leaks from consuming all system RAM
# - Ensures fair resource distribution
# - Makes monitoring and debugging easier
# - Allows running more services on the same hardware
#
# Monitoring:
# - Use `make resources` to see current usage
# - Use `make resources-monitor` for real-time monitoring
# - Check with `docker stats` to see if limits are being hit
#
# Tuning:
# - If you see OOMKilled errors, increase memory limits
# - If response times are slow, check CPU usage and increase limits
# - Monitor with Prometheus + Grafana for production
# ============================================================================

# ============================================================================
# OBSERVABILITY STACK - Monitoring Profile
# ============================================================================
# Usage:
#   make obs-up      # Start monitoring stack (Prometheus, Grafana, Loki)
#   make obs-down    # Stop monitoring stack
#
# Access:
#   Grafana:    http://localhost:3001 (admin/admin)
#   Prometheus: http://localhost:9090
#   cAdvisor:   http://localhost:8080
#
# Prerequisites:
#   - API must expose /metrics endpoint (added via Prometheus middleware)
#   - Monitoring configs in infra/monitoring/ directory
# ============================================================================

  # Prometheus - Metrics collection and storage
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: copilotos-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - copilotos-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    profiles:
      - monitoring

  # Grafana - Metrics visualization
  grafana:
    image: grafana/grafana:10.2.2
    container_name: copilotos-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3001
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana_data:/var/lib/grafana
    ports:
      - "3001:3000"
    networks:
      - copilotos-network
    depends_on:
      - prometheus
      - loki
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    profiles:
      - monitoring

  # Loki - Log aggregation
  loki:
    image: grafana/loki:2.9.3
    container_name: copilotos-loki
    restart: unless-stopped
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/tmp/loki
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    networks:
      - copilotos-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    profiles:
      - monitoring

  # Promtail - Log collector
  promtail:
    image: grafana/promtail:2.9.3
    container_name: copilotos-promtail
    restart: unless-stopped
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - copilotos-network
    depends_on:
      - loki
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.05'
          memory: 32M
    profiles:
      - monitoring

  # cAdvisor - Container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: copilotos-cadvisor
    restart: unless-stopped
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk:/dev/disk:ro
    ports:
      - "8080:8080"
    networks:
      - copilotos-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    profiles:
      - monitoring

volumes:
  prometheus_data:
    name: copilotos_prometheus_data
  grafana_data:
    name: copilotos_grafana_data
  loki_data:
    name: copilotos_loki_data

networks:
  copilotos-network:
    external: true
