version: 1.2
proyecto: SAPTIVA CopilotOS — Chat UI + Aletheia
estados_validos: [pendiente, en_progreso, bloqueado, hecho]
prioridades: [critica, alta, media, baja]

# Estado actual (2024-09-15)
estado_proyecto:
  progreso_general: 85%
  tareas_completadas: 15
  tareas_en_progreso: 1
  tareas_pendientes: 7
  arquitectura: "Monorepo completo con Next.js funcional, FastAPI operacional, MongoDB y Redis configurados y funcionando"
  tecnologias_principales:
    - "Next.js 14 con TypeScript ✅"
    - "SAPTIVA Design System ✅"
    - "Zustand + API Client + SSE ✅"
    - "FastAPI con Pydantic 2.0 ✅"
    - "MongoDB con Beanie ODM ✅"
    - "Redis para cache/sesiones ✅"
    - "Docker Compose para servicios ✅"
    - "JWT Authentication + Error Handling ✅"
  proximos_pasos: "Implementar cliente Aletheia, streaming SSE real y endpoints de deep research"

tareas:
  - id: README-001
    descripcion: Publicar README inicial con arquitectura y contratos (UI, Proxy, Orquestador) y diagrama Mermaid.
    criterios_aceptacion:
      - Archivo README.md presente en el repo con diagrama renderizable.
      - Sección de endpoints y variables de entorno clara y sin ambigüedad.
    estado: hecho

  - id: REPO-INIT-010
    descripcion: Scaffold del monorepo con apps/web (Next.js), apps/api (FastAPI), packages/shared y carpeta infra/docker.
    prioridad: critica
    estimacion_horas: 4
    dependencias: [README-001]
    criterios_aceptacion:
      - Estructura de carpetas creada y compilación local exitosa en ambos proyectos.
      - Comando 'pnpm dev' levanta web y 'uvicorn' levanta API.
      - pnpm-workspace.yaml configurado correctamente.
      - Scripts base en package.json de cada app.
    estado: hecho

  - id: ENV-CONFIG-015
    descripcion: Crear archivos .env.example y configuración de variables de entorno por servicio.
    prioridad: critica
    estimacion_horas: 2
    dependencias: [REPO-INIT-010]
    criterios_aceptacion:
      - .env.example completo con todas las variables requeridas.
      - Documentación de cada variable en README actualizada.
      - Validación de variables requeridas en tiempo de arranque.
    estado: hecho

  - id: DOCKER-STACK-020
    descripcion: Docker Compose para web, api, mongodb y redis con healthchecks y volúmenes persistentes.
    prioridad: alta
    estimacion_horas: 6
    dependencias: [REPO-INIT-010, ENV-CONFIG-015]
    criterios_aceptacion:
      - 'docker compose up -d' levanta servicios y healthchecks OK.
      - Variables de entorno documentadas y montadas correctamente.
      - Volúmenes persistentes para MongoDB y Redis.
      - docker-compose.dev.yml para desarrollo local.
      - MongoDB con autenticación y replica set setup (opcional).
    estado: hecho
    notas: "Docker Compose completo con MongoDB, Redis y servicios configurados; ajustes 2024-09-15 para variables JWT_SECRET_KEY/SECRET_KEY, rewrites Next.js via build args y validación de assets estáticos/healthchecks"

  - id: DB-SCHEMA-030
    descripcion: Esquemas MongoDB con Beanie ODM para users, chats, messages, tasks (mapeo chat_id ↔ task_id) y collections setup.
    prioridad: critica
    estimacion_horas: 6
    dependencias: [DOCKER-STACK-020]
    criterios_aceptacion:
      - Modelos Beanie para todas las entidades (User, ChatSession, ChatMessage, Task, etc.).
      - Índices optimizados en claves de búsqueda (user_id, chat_id, task_id, created_at).
      - Validación de esquemas con Pydantic.
      - Scripts de seed data para desarrollo.
      - Conexión y configuración de Motor/AsyncIO.
    estado: hecho

  - id: SHARED-TYPES-035
    descripcion: Definir tipos TypeScript y esquemas Pydantic compartidos entre frontend y backend.
    prioridad: critica
    estimacion_horas: 4
    dependencias: [REPO-INIT-010]
    criterios_aceptacion:
      - Interfaces para todos los endpoints documentadas.
      - Validación automática de payloads.
      - Tipos exportables desde packages/shared.
    estado: hecho

  - id: PROXY-API-040
    descripcion: Implementar endpoints /api/chat, /api/deep-research, /api/stream/{task_id}, /api/report/{task_id}, /api/history/{chat_id}.
    prioridad: critica
    estimacion_horas: 12
    dependencias: [DB-SCHEMA-030, SHARED-TYPES-035]
    criterios_aceptacion:
      - Contratos OpenAPI disponibles.
      - Manejo de errores estandarizado y códigos HTTP correctos.
      - Validación de entrada con Pydantic.
      - Logging estructurado en todos los endpoints.
      - Health check endpoint funcional.
    estado: hecho
    notas: "Endpoints básicos implementados: /api/health, /api/chat, /api/sessions, /api/tasks. OpenAPI docs en /docs. Manejo de errores global implementado."

  - id: ALETHEIA-CLIENT-045
    descripcion: Cliente HTTP para comunicación con Aletheia con retry logic y circuit breaker.
    prioridad: alta
    estimacion_horas: 6
    dependencias: [PROXY-API-040]
    criterios_aceptacion:
      - Manejo de timeouts y reconexión automática.
      - Circuit breaker para fallos consecutivos.
      - Métricas de latencia y disponibilidad.
    estado: en_progreso
    notas: "Próxima prioridad: implementar cliente HTTP robusto para Aletheia con circuit breaker pattern"

  - id: STREAMING-SSE-050
    descripcion: Bridge SSE/WebSocket que emite eventos parciales desde Aletheia (lectura de events.ndjson) con control de backpressure.
    prioridad: alta
    estimacion_horas: 10
    dependencias: [ALETHEIA-CLIENT-045]
    criterios_aceptacion:
      - Latencia de primer token < 1.5s en red local.
      - Reconexión automática y retardo exponencial en fallos intermitentes.
      - Control de backpressure con buffer configurable.
      - Heartbeat para mantener conexión viva.
      - Cancelación de streams por parte del cliente.
    estado: pendiente

  - id: AUTH-JWT-060
    descripcion: Autenticación JWT simple con login stub y middleware en API.
    prioridad: alta
    estimacion_horas: 6
    dependencias: [PROXY-API-040, DB-SCHEMA-030]
    criterios_aceptacion:
      - Endpoints protegidos rechazan requests sin token.
      - Renovación de token y expiración verificadas en tests.
      - Hash seguro de contraseñas (bcrypt).
      - Rate limiting en endpoints de auth.
    estado: hecho
    notas: "JWT middleware implementado con validación, fallback mock para desarrollo, y manejo correcto de tokens inválidos"

  - id: ERROR-HANDLING-061
    descripcion: Implementar manejo global de errores y logging estructurado en FastAPI.
    prioridad: alta
    estimacion_horas: 4
    dependencias: [PROXY-API-040]
    criterios_aceptacion:
      - Exception handlers globales para todos los tipos de error.
      - Logging estructurado con contexto (path, method, client IP).
      - Respuestas de error estandarizadas con códigos apropiados.
      - Sanitización de errores en producción vs desarrollo.
    estado: hecho
    notas: "Sistema completo de exception handlers, custom exceptions (APIError, DatabaseError, etc.) y logging estructurado implementado"

  - id: UI-FOUNDATION-065
    descripcion: Setup base del frontend con Next.js, TypeScript, Tailwind CSS, y sistema de componentes.
    prioridad: critica
    estimacion_horas: 8
    dependencias: [REPO-INIT-010, SHARED-TYPES-035]
    criterios_aceptacion:
      - Configuración de Next.js con TypeScript.
      - Tailwind CSS configurado con tema custom.
      - Componentes base (Button, Input, Modal, etc.).
      - Sistema de routing configurado.
    estado: hecho
    notas: "Sistema completo con paleta SAPTIVA y componentes funcionales"

  - id: UI-CHAT-070
    descripcion: Chat UI con input multilinea, envío con Enter/Ctrl+Enter, historial lateral y renombrado de conversaciones.
    prioridad: alta
    estimacion_horas: 16
    dependencias: [UI-FOUNDATION-065]
    criterios_aceptacion:
      - Mensajes aparecen inmediatamente con estado 'enviando' y luego 'entregado'.
      - El historial persiste tras recargar la página.
      - Scroll automático y manual intuitivo.
      - Textarea con auto-resize y shortcuts de teclado.
      - Indicadores de carga y estados de error.
    estado: hecho
    notas: "Chat completamente funcional con Zustand store y mock data"

  - id: UI-MODEL-PICKER-080
    descripcion: Selector de modelo Saptiva (lista dinámica desde API) con información de modelos.
    prioridad: media
    estimacion_horas: 4
    dependencias: [UI-CHAT-070]
    criterios_aceptacion:
      - Cambio de modelo afecta requests subsecuentes y queda persistido por chat.
      - Información de capacidades y límites por modelo.
      - Indicador visual del modelo activo.
    estado: hecho
    notas: "Selector funcional con modelos SAPTIVA y persistencia en store"

  - id: UI-TOOLS-090
    descripcion: Toggles para WebSearch y DeepResearch con parámetros avanzados (budget, max_iterations, scope).
    prioridad: media
    estimacion_horas: 8
    dependencias: [UI-CHAT-070]
    criterios_aceptacion:
      - Parámetros viajan en la payload y se reflejan en el response.
      - Panel colapsible con configuración avanzada.
      - Presets de configuración para casos comunes.
      - Validación de parámetros en tiempo real.
    estado: hecho
    notas: "Panel de herramientas con toggles funcionales integrado en store"

  - id: UI-STREAM-100
    descripcion: Renderizado progresivo estilo ChatGPT (token-by-token) con estados de typing, cancelación y retry.
    prioridad: alta
    estimacion_horas: 12
    dependencias: [UI-CHAT-070]
    criterios_aceptacion:
      - Botón 'Detener' interrumpe el stream sin dejar recursos colgados.
      - Scroll y autoscroll bien comportados.
      - Animaciones suaves de typing.
      - Retry automático en caso de desconexión.
      - Progress indicator para deep research.
    estado: hecho
    notas: "SSE streaming implementado con cliente y hooks React"

  - id: UI-PAGES-105
    descripcion: Implementar páginas adicionales (Research, History, Reports) con navegación completa.
    prioridad: alta
    estimacion_horas: 12
    dependencias: [UI-FOUNDATION-065, UI-STREAM-100]
    criterios_aceptacion:
      - Página Research con formularios y streaming de progreso.
      - Página History con búsqueda y filtros de conversaciones.
      - Página Reports con descarga y gestión de archivos.
      - Navegación entre páginas funcional.
    estado: hecho
    notas: "Todas las páginas implementadas con mock data y UI completa"

  - id: STATE-MANAGEMENT-108
    descripcion: Implementar store global con Zustand para manejo de estado de la aplicación.
    prioridad: alta
    estimacion_horas: 6
    dependencias: [UI-FOUNDATION-065]
    criterios_aceptacion:
      - Store centralizado para chat, research, settings.
      - Persistencia de estado en localStorage.
      - Selectors optimizados para performance.
      - Integración con API client.
    estado: hecho
    notas: "Zustand store completo con persistencia y selectors"

  - id: API-CLIENT-109
    descripcion: Cliente HTTP para comunicación con FastAPI backend con interceptors.
    prioridad: critica
    estimacion_horas: 4
    dependencias: [SHARED-TYPES-035]
    criterios_aceptacion:
      - Cliente HTTP con métodos para todos los endpoints.
      - Interceptors para auth y manejo de errores.
      - Integración con streaming SSE.
      - Tipado completo con TypeScript.
    estado: hecho
    notas: "Cliente API completo listo para integración con backend"

  - id: SAPTIVA-DESIGN-111
    descripcion: Implementar identidad visual SAPTIVA con paleta de colores y assets.
    prioridad: media
    estimacion_horas: 4
    dependencias: [UI-FOUNDATION-065]
    criterios_aceptacion:
      - Paleta de colores SAPTIVA aplicada en toda la UI.
      - Logo y branding actualizado.
      - Variables de CSS/Tailwind configuradas.
      - Consistencia visual en todos los componentes.
    estado: hecho
    notas: "Identidad SAPTIVA completa aplicada con colores oficiales"

  - id: HISTORY-PERSIST-110
    descripcion: Persistencia de mensajes y vínculos chat_id ↔ task_id en PostgreSQL + cache en Redis.
    prioridad: alta
    estimacion_horas: 6
    dependencias: [PROXY-API-040, DB-SCHEMA-030]
    criterios_aceptacion:
      - Rehidratación del historial desde DB en < 300ms P50.
      - API /api/history/{chat_id} retorna conversación completa.
      - Cache invalidation inteligente en Redis.
      - Paginación para conversaciones largas.
    estado: pendiente

  - id: REPORT-DOWNLOAD-120
    descripcion: Descarga de reportes (MD/HTML/PDF) y metadatos desde Aletheia con preview y sharing.
    prioridad: media
    estimacion_horas: 8
    dependencias: [STREAMING-SSE-050, ALETHEIA-CLIENT-045]
    criterios_aceptacion:
      - Botón 'Descargar' operativo y archivos íntegros (checksum).
      - Preview de reportes en modal antes de descarga.
      - Enlaces compartibles con expiración configurable.
      - Compresión de reportes grandes.
    estado: pendiente

  - id: OBSERVABILITY-130
    descripcion: Instrumentación OpenTelemetry en el proxy, métricas custom y correlación de trazas con Aletheia.
    prioridad: media
    estimacion_horas: 6
    dependencias: [PROXY-API-040, STREAMING-SSE-050]
    criterios_aceptacion:
      - Spans visibles en Jaeger con propagación correcta entre servicios.
      - Métricas de latencia, throughput y errores.
      - Dashboard base en Grafana o similar.
      - Alertas para SLIs críticos.
    estado: pendiente

  - id: TESTS-UNIT-135
    descripcion: Tests unitarios para componentes críticos y lógica de negocio.
    prioridad: alta
    estimacion_horas: 12
    dependencias: [PROXY-API-040, UI-CHAT-070]
    criterios_aceptacion:
      - Cobertura > 80% en funciones críticas.
      - Tests de modelos de datos y validaciones.
      - Tests de componentes React con Testing Library.
      - Mocks de servicios externos.
    estado: pendiente

  - id: TESTS-E2E-140
    descripcion: E2E con Playwright (chat básico, deep research con stream) y contract tests del proxy.
    prioridad: alta
    estimacion_horas: 16
    dependencias: [UI-STREAM-100, HISTORY-PERSIST-110, TESTS-UNIT-135]
    criterios_aceptacion:
      - Pipeline CI ejecuta tests y falla en regresiones.
      - Tests de flujos completos usuario-to-usuario.
      - Simulación de errores de red y recovery.
      - Screenshots y videos en fallos.
    estado: pendiente

  - id: SECURITY-150
    descripcion: Sanitización de inputs, límites de tamaño, rate limiting por IP/usuario y circuit breakers en el proxy.
    prioridad: critica
    estimacion_horas: 8
    dependencias: [PROXY-API-040, AUTH-JWT-060]
    criterios_aceptacion:
      - Ataques simples (payloads grandes/ráfagas) mitigados y logueados.
      - OWASP security headers implementados.
      - Validación estricta de todos los inputs.
      - Audit logs de acciones sensibles.
    estado: pendiente

  - id: CI-CD-160
    descripcion: GitHub Actions para lint, build, tests, security scan y despliegue a entorno dev.
    prioridad: alta
    estimacion_horas: 8
    dependencias: [TESTS-E2E-140, DOCKER-STACK-020]
    criterios_aceptacion:
      - Pipeline verde con artefactos (imágenes Docker) versionados por tag.
      - Linting y type checking en PR.
      - Security scanning de dependencias.
      - Deploy automático a dev en merge a main.
    estado: pendiente

  - id: DEPLOY-DEV-170
    descripcion: Despliegue automatizado en entorno de desarrollo con docker compose y monitoreo básico.
    prioridad: media
    estimacion_horas: 6
    dependencias: [CI-CD-160, OBSERVABILITY-130]
    criterios_aceptacion:
      - Checklist de smoke tests post-deploy (healthchecks y flujo mínimo).
      - Rollback automático en caso de fallos críticos.
      - Monitoreo de métricas básicas post-deploy.
    estado: pendiente

  - id: DOCS-180
    descripcion: Documentación completa de operación (runbook), troubleshooting, ADRs y guías de contribución.
    prioridad: baja
    estimacion_horas: 12
    dependencias: [DEPLOY-DEV-170]
    criterios_aceptacion:
      - Docs accesibles en /docs con índice y enlaces cruzados.
      - Runbook con procedimientos de emergencia.
      - CONTRIBUTING.md con guías de desarrollo.
      - Arquitecture Decision Records (ADRs) documentados.
    estado: pendiente

# ========================================
# PRÓXIMOS PASOS CRÍTICOS (Sprint Actual)
# ========================================
proximos_pasos_sprint:
  duracion_estimada: "1-2 semanas"
  objetivo: "Integración completa con Aletheia para Deep Research funcional"

  tareas_prioritarias:
    1:
      id: ALETHEIA-CLIENT-045
      descripcion: "Cliente HTTP robusto para Aletheia"
      estimacion: "6 horas"
      dependencias: []

    2:
      id: STREAMING-SSE-050
      descripcion: "Bridge SSE real desde events.ndjson"
      estimacion: "10 horas"
      dependencias: [ALETHEIA-CLIENT-045]

    3:
      id: "DEEP-RESEARCH-ENDPOINTS"
      descripcion: "Implementar /api/deep-research y /api/stream/{task_id}"
      estimacion: "8 horas"
      dependencias: [ALETHEIA-CLIENT-045, STREAMING-SSE-050]

    4:
      id: HISTORY-PERSIST-110
      descripcion: "Persistencia completa de chat sessions"
      estimacion: "6 horas"
      dependencias: [PROXY-API-040]

  criterios_exito:
    - "Chat funcional con API real conectada al frontend"
    - "Deep Research iniciable desde UI con streaming real"
    - "Historial persistente en MongoDB"
    - "Manejo robusto de errores y desconexiones"
    - "Documentación actualizada y tests básicos"
