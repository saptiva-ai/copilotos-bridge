# ===========================================
# OPTIMIZED MULTI-STAGE DOCKERFILE FOR FRONTEND
# ===========================================

# Stage 1: Base Node.js image with pnpm
FROM node:20-alpine AS base
RUN corepack enable pnpm
WORKDIR /app

# Stage 2: Dependencies
FROM base AS deps
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY packages/ ./packages/
COPY apps/web/package.json ./apps/web/
RUN pnpm install --frozen-lockfile

# Stage 3: Builder
FROM base AS builder
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Build arguments for production
ARG NEXT_PUBLIC_API_URL=https://copiloto.saptiva.com/api
ARG NODE_ENV=production

# Set environment variables
ENV NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL
ENV NODE_ENV=$NODE_ENV

# Build the application
WORKDIR /app/apps/web
RUN pnpm build

# Stage 4: Runtime
FROM node:20-alpine AS runtime
RUN corepack enable pnpm

WORKDIR /app

# Copy built application - Next.js standalone structure
COPY --from=builder /app/apps/web/.next/standalone ./
COPY --from=builder /app/apps/web/.next/static ./apps/web/.next/static
COPY --from=builder /app/apps/web/public ./apps/web/public

# Create non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Set correct permissions
RUN chown -R nextjs:nodejs /app

USER nextjs

EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

CMD ["node", "apps/web/server.js"]